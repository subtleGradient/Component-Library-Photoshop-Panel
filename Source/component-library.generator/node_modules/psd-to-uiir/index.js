module.exports = exports = PSD_to_UIIR

function PSD_to_UIIR(psd, pushable){
  if (!(pushable && pushable.push)) throw Error('requires a push method');
  
  PSD_to_UIIR.psd(psd, pushable)
  
  return pushable
}

PSD_to_UIIR.DocumentType = 'View'
PSD_to_UIIR.LayerSetType = 'View'
PSD_to_UIIR.LayerType = 'ImageView'
PSD_to_UIIR.TextLayerType = 'View'

PSD_to_UIIR.Document_layersByIdKey = 'layersById'
PSD_to_UIIR.Document_layersArrayKey = 'subViews'
PSD_to_UIIR.Layer_parentKey = 'superView'

PSD_to_UIIR.psd = function(psd, pushable){
  var documentId = 'PSD'
  
  this.setType(pushable, documentId, this.DocumentType)
  this.set(pushable, this._path(documentId, 'file'), psd.file)
  this.set(pushable, this._path(documentId, 'width'), psd.bounds.right - psd.bounds.left)
  this.set(pushable, this._path(documentId, 'height'), psd.bounds.bottom - psd.bounds.top)
  
  var layersByIdKey = documentId
  // var layersByIdKey = this._path(documentId, this.Document_layersByIdKey)
  this.setObjectType(pushable, layersByIdKey)
  
  psd.layers.reverse().forEach(function(layer){
    layer.psd = psd
    this.PSD_Layer(pushable, layersByIdKey, layer)
  },this)
  
}

PSD_to_UIIR._stringToIdentifier = function(string){
  if (this._path.isSafe.pattern.test(string)) return string;
  string = string.replace(/ /g, '_')
  if (this._path.isSafe.pattern.test(string)) return string;
  return string
}
PSD_to_UIIR.PSD_Layer = function(pushable, parentId, layer){
  var layerIdAbsolute = this._path(parentId, this._stringToIdentifier(layer.name))
  var transaction = this._beginBlock('view')
  
  var layerId = transaction.params[0]
  this.setType(transaction, layerId, this.LayerType)
  this.set(transaction, this._path(layerId, 'name'), layer.name)
  this.set(transaction, this._path(layerId, 'id'), layer.id)
  this.set(transaction, this._path(layerId, 'zIndex'), 100 + layer.index)
  
  var bounds = layer.uiir_bounds || layer.boundsWithFX || layer.bounds
  this.set(transaction, this._path(layerId, 'width'), bounds.right - bounds.left)
  this.set(transaction, this._path(layerId, 'height'), bounds.bottom - bounds.top)
  this.set(transaction, this._path(layerId, 'opacity'), layer.blendOptions && layer.blendOptions.opacity ? layer.blendOptions.opacity.value : 1)
  
  // this.set(transaction, this._path(this._path(layerId, 'style'), 'backgroundColor'), 'rgba(33%,66%,99%,0.25)')
  
  /*
    http://0.0.0.0:8236/?component=PSLayerImage&psd=/Users/aylott/Projects/Facebook/DesignTools/AoPS.nw/node_modules/photoshop-layer-stream/test/stuff/example.psd&name=Foo&_=/
  */
  
  layer._fileName = (layer.name + '.png').replace(/(\.\w+)\.png/, '$1')
  // layer._url = 'file://' + layer.psd.file.replace('.psd','-assets') + '/' + layer._fileName
  layer._url = './' + layer._fileName
  
  // this.set(transaction, this._path(this._path(layerId, 'style'), 'backgroundImage'),
  //   'url(' + (layer._url) + ')')
  this.set(transaction, this._path(layerId, 'image'), layer._url)
  
  if (layer.layers) {
    transaction.push('')
    var parentLayer = layer
    layer.layers.reverse().forEach(function(layer){
      layer.psd = parentLayer.psd
      var childBounds = layer.boundsWithFX || layer.bounds
      layer.uiir_bounds = {
        top: childBounds.top - bounds.top,
        right: childBounds.right - bounds.left,
        bottom: childBounds.bottom - bounds.top,
        left: childBounds.left - bounds.left,
      }
      this.PSD_Layer(transaction, layerId, layer)
    },this)
  }
  
  transaction.returnValue(layerId)
  
  this.setRef(pushable, layerIdAbsolute,
  transaction.wrapInObjectEditFunctionCall(layerIdAbsolute))
  
  this.setRef(pushable, this._path(layerIdAbsolute, this.Layer_parentKey), parentId)
  this.set(pushable, this._path(layerIdAbsolute, 'x'), bounds.left)
  this.set(pushable, this._path(layerIdAbsolute, 'y'), bounds.top)
  
  pushable.push('')
}

PSD_to_UIIR.PushableBlock = function(params){
  this.params = params
  this.commands = []
}
PSD_to_UIIR.PushableBlock.prototype.indentString = '\t'
PSD_to_UIIR.PushableBlock.prototype.indent = 1
PSD_to_UIIR.PushableBlock.prototype.push = function(command){
  var indent = Array(this.indent+1).join(this.indentString)
  this.commands.push(indent + command.split('\n').join('\n' + indent))
  return this
}
PSD_to_UIIR.PushableBlock.prototype.toString = function(){
  return this.commands.join('\n')
}
PSD_to_UIIR.PushableBlock.prototype.returnValue = function(ref){
  this.push('return ' + ref)
  return this
}
PSD_to_UIIR.PushableBlock.prototype.dump = function(pushable){
  while (this.commands.length > 0)
    pushable.push(this.commands.shift())
  return this
}
PSD_to_UIIR.PushableBlock.prototype.wrapInObjectEditFunctionCall = function(id){
  this.wrapInFunctionCall(id)
  return this
}
PSD_to_UIIR.PushableBlock.prototype.wrapInFunctionCall = function(){
  var args = Array.prototype.slice.call(arguments)
  this.wrapInFunctionBlock()
  this.commands[0] = '(' + this.commands[0]
  this.commands[this.commands.length-1] += ')' + '(' + args.join(', ') + ')'
  return this
}
PSD_to_UIIR.PushableBlock.prototype.wrapInFunctionBlock = function(id){
  this.commands.unshift('function' + (id ? ' '+id : '') + '(' + this.params.join(', ') + '){')
  this.commands.push('}')
  return this
}
PSD_to_UIIR.PushableBlock.prototype.wrapInBlock = function(){
  this.commands.unshift('{')
  this.commands.push('}')
  return this
}

PSD_to_UIIR._beginBlock = function(){
  return new (this.PushableBlock)(Array.prototype.slice.call(arguments))
}

PSD_to_UIIR._shortPath = function(pushable, id, shortId){
  pushable.push(shortId + ' = ' + id)
  return shortId
}
PSD_to_UIIR._path = function(id, key){
  var keyCode = this._path.isSafe(key) ? '.' + key : '[' + JSON.stringify(key) + ']'
  return id + keyCode
}
PSD_to_UIIR._path.isSafe = function(key){
  if (typeof key == 'string' && this.isSafe.pattern.test(key)) return true;
  return false
}
PSD_to_UIIR._path.isSafe.pattern = /^[a-z$_][a-z$_0-9]*$/i

PSD_to_UIIR.setArrayType = function(pushable, id){
  pushable.push('if (!Array.isArray(' + id + '))\t' + id + '=[];')
}
PSD_to_UIIR.setObjectType = function(pushable, id){
  pushable.push('if (!(typeof ' + id + ' == "object" && ' + id + ' != null))\t' + id + '={};')
}
PSD_to_UIIR.setType = function(pushable, id, type){
  pushable.push('if (typeof ' + id + ' == "undefined")\t' + id + '=new ' + type + ';')
}

PSD_to_UIIR.set = function(pushable, id, value){
  if (typeof value != 'object') return this.setValue(pushable, id, value);
  var key
  if (Array.isArray(value)) {
    this.setArrayType(pushable, id)
    
    for (key = -1, length = value.length; ++key < length;) {
      if (!(key in value)) continue;
      this.set(pushable, this._path(id, key), value[key])
    }
    return
  }
  
  this.setObjectType(pushable, id)
  for (key in value) {
    this.set(pushable, this._path(id, key), value[key])
  }
}

PSD_to_UIIR.setValue = function(pushable, id, value){
  this.setRef(pushable, id, JSON.stringify(value))
}

PSD_to_UIIR.setRef = function(pushable, id, ref){
  pushable.push(id + ' = ' + ref + ';')
}
