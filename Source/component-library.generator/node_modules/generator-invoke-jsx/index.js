module.exports = exports = function invokeWithGenerator(generator){

  var jsx_templateWrapper = '/*$$INCLUDES$$*/\n;($$CODE$$)({})';

  function jsx_template(exports){
    try{
      exports.result = ($$JSX_FUNCTION$$).apply(null, [].concat($$ARGS$$));
    }catch(e){
      exports.error = e;
    }
    try{
      return JSON.stringify(exports);
    }catch(e){
      return '{"error":"' + e + '"}'
    }
  }

  invoke.defaultCallback = function(error, result){
    if (error) console.error(error);
    else console.log(result);
  }

  var path = require('path')

  invoke.imports = [
    path.join(__dirname, '/lib/ExtendScript/index.jsxinc'),
    path.join(__dirname, '/lib/ExtendScript/FakeDocument.jsxinc'),
    path.join(__dirname, '/lib/ExtendScript/FakeLayer.jsxinc'),
  ]

  function invoke(jsx, args, callback){
    if (arguments.length < 3){
      callback = args
      args = undefined
    }
    if (!callback) callback = invoke.defaultCallback;
    if (typeof jsx == 'string') jsx = Function('return eval(' + JSON.stringify(jsx) + ')');
    if (typeof jsx != 'function') throw TypeError('expected function');
    var code = jsx_templateWrapper
      .replace('$$CODE$$', jsx_template.toString()
        .replace('$$JSX_FUNCTION$$', jsx.toString())
        .replace('$$ARGS$$', JSON.stringify(args))
      )
      .replace('/*$$INCLUDES$$*/', invoke.imports.map(function(file){return '#include ' + JSON.stringify(file)}).join('\n'))
    ;
    if (invoke.debug) console.log(code);
    invoke.evalScript(code, function(response){
      if (typeof response != 'object'){try { response = JSON.parse(response) }catch(e){}}
      if (typeof response == 'object'){
        callback(response.error, response.result);
      } else {
        callback(response.indexOf('rror') != -1 ? response : null, response);
      }
    });
  }

  invoke.evalScript = function(code, callback){
    generator.evaluateJSXString(code).then(callback,callback).done()
  }

  return invoke
}
