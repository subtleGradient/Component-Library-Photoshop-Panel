require('tap').test("Iterator", function tap(t){
  
  var Iterator = require('../lib/Iterator')
  var Graph = require('../lib/Graph')
  var Config = require('../lib/Config')
  
  var mockConfig1 =
  {execute:Graph, graph:{
    Iterator_1:{execute:Iterator, iterations:3, graph:{
      IteratorVars_1:{execute:Iterator.Vars},
      CountExec_1:{execute:CountExec},
      Subgraph_1:{execute:Graph, graph:{
        Subgraph_1:{execute:Graph, graph:{
          Subgraph_1:{execute:Graph, graph:{
            IteratorVars_1:{execute:Iterator.Vars},
            Config_1:{execute:Config, $foo:function(){ return this.getParent().IteratorVars_1.getIterator().index }},
          }},
        }},
      }},
    }},
  }};
  
  function CountExec(c,s){s.execCount = (s.execCount||0) + 1}
  
  t.test('exists', function tap(t){
    t.ok(Iterator)
    t.ok(Iterator.Vars)
    t.end()
  })
  
  t.test('getIterator', function tap(t){
    var state = {}
    mockConfig1.execute(mockConfig1, state)
    t.is(state.Iterator_1.IteratorVars_1.getIterator, state.Iterator_1.getThis)
    t.is(state.Iterator_1.Subgraph_1.Subgraph_1.Subgraph_1.IteratorVars_1.getIterator, state.Iterator_1.getThis)
    t.end()
  })
  
  t.test('iterates the right number of iterations', function tap(t){
    
    var state = {}
    
    mockConfig1.execute(mockConfig1, state)
    t.is(state.Iterator_1.CountExec_1.execCount, state.Iterator_1.iterations)
    
    mockConfig1.execute(mockConfig1, state)
    t.is(state.Iterator_1.CountExec_1.execCount, state.Iterator_1.iterations * 2)
    
    mockConfig1.execute(mockConfig1, state)
    t.is(state.Iterator_1.CountExec_1.execCount, state.Iterator_1.iterations * 3)
    
    t.end()
  })
  
})
