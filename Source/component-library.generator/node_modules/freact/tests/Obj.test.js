require('tap').test(function tap(t){
  
  var Obj = require('../lib/Obj')
  
  t.test('exists', function tap(t){
    t.ok(Obj)
    t.end()
  })
  
  t.test('duplicates values from config onto state', function tap(t){
    var config = {}
    var state = {}
    
    t.is(Object.keys(config).length, 0)
    t.is(Object.keys(state).length, 0)
    
    config.key = 'value'
    
    t.is(Object.keys(config)[0], 'key')
    t.is(Object.keys(state).length, 0)
    
    Obj(config, state)
    
    t.is(config.key, state.key)
    
    t.end()
  })
  
  t.test('creates a state object if it does not have one already', function tap(t){
    var config = {foo:{}}
    var state = {}
    
    t.is(typeof config.foo, 'object')
    t.is(typeof state.foo, 'undefined')
    
    Obj(config, state)
    
    t.is(typeof config.foo, 'object')
    t.is(typeof state.foo, 'object')
    
    t.end()
  })
  
  t.test('state does not refer to config objects', function tap(t){
    var config = {foo:{bar:"baz"}}
    var state = {}
    
    t.is(typeof config.foo, 'object')
    t.is(typeof state.foo, 'undefined')
    
    Obj(config, state)
    
    t.is(config.foo.bar, state.foo.bar)
    t.ok(config.foo != state.foo)
    
    t.end()
  })
  
  t.test('valueOf is called when setting state', function tap(t){
    var config = {foo:{valueOf:function(){ return Math.random() }}}
    var state = {}
    
    Obj(config, state)
    
    t.ok(state.foo)
    t.is(typeof config.foo, 'object')
    t.is(typeof state.foo, 'number')
    
    t.end()
  })
  
  t.test('valueOf is called after setting state', function tap(t){
    var config = {foo:{valueOf:function(){ return this.isStateObject }}}
    var state = {foo:{isStateObject:true}}
    
    t.ok(!+config.foo)
    t.ok(state.foo.isStateObject)
    
    Obj(config, state)
    
    t.is(state.foo, true)
    t.ok(state.foo === true)
    
    t.end()
  })
  
  t.test('bindings', function tap(t){
    
    function Get(){
      var object = this.object;
      if (!('object' in this)) object = this;
      var key = this.key;
      if (Array.isArray(key))
        for (var index = -1, length = key.length; ++index < length;) {
          object = object[key[index]];
          if (object == null) break;
        }
      else object = object[key];
      return object;
    }
    
    var config = {
      foo:{bar:{baz:Math.random()}},
      foo_bar_baz3:{valueOf:Get, key:["__parent__","foo","bar","baz"]},
      foo2:{bar:{baz:{valueOf:"Get", key:["__parent__","__parent__","__parent__","foo","bar","baz"]}}},
      foo3:{bar:{baz:{valueOf:function(){ return this.__parent__.__parent__.__parent__.foo.bar.baz }}}},
      foo4:{bar:{get baz(){ return state.foo.bar.baz }}},
    }
    var state = {Get:Get}
    
    Obj(config, state)
    
    t.is(state.foo_bar_baz3, state.foo.bar.baz)
    t.is(state.foo3.bar.baz, state.foo.bar.baz)
    t.is(state.foo2.bar.baz, state.foo.bar.baz)
    
    t.end()
  })
  
  t.test('look for parent[key] when state is null', function tap(t){
    var config = {foo:{bar:{baz:{ abc:123 }}}}
    var state = {foo:{}}
    var state2 = {foo:{}}
    
    Obj(config.foo, state.foo)
    t.is(state.foo.bar.baz.abc, config.foo.bar.baz.abc)
    
    t.is(state2['foo'], state2.foo)
    Obj(config.foo, null, state2, 'foo')
    t.is(state2.foo.bar.baz.abc, config.foo.bar.baz.abc)
    
    t.end()
  })
  
  t.test("don't copy getters from config", function tap(t){
    
    var config = {get awesomeness(){ return Math.random() }}
    var state = {}
    
    t.isNot(config.awesomeness, config.awesomeness)
    
    Obj(config, state)
    
    t.is(state.awesomeness, state.awesomeness)
    
    t.end()
  })
  
  t.test('state.config = {}', function tap(t){
    
    var state = {
      set config(config){ Obj(this._config = config, this) },
      get config(){ return this._config || {} },
    }
    
    state.config = {
      get key0(){ return Math.random() },
      get key1(){ return Math.random() },
    }
    
    t.isNot(state.config.key0, state.config.key0)
    t.is(state.key0, state.key0)
    
    t.end()
  })
  
  t.test('state.configure({})', function tap(t){
    
    var state = {
      config:{},
      configure:function(config){ Obj(this.config = config, this) }
    }
    state.configure({
      get key0(){ return Math.random() },
      get key1(){ return Math.random() },
    })
    
    t.isNot(state.config.key0, state.config.key0)
    t.is(state.key0, state.key0)
    
    t.end()
  })
})
