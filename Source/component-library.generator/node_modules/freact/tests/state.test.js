require('tap').test(function tap(t){
  
  t.test('defineConfigurator', function tap(t){
    
    function defineSetter(state, key, configurator){
      var _key = '_' + key;
      var keyConfig = key + 'Config';
      var keyConfigurator = keyConfig + 'urator';
      state[keyConfigurator] = configurator;
      
      Object.defineProperty(state, key, {
        get: function(){
          return this[_key]
        },
        set: function(config){
          this[_key] = this[keyConfigurator](this[keyConfig] = config, this[_key], key, this)
        }
      })
    }
    function defineConfigurator(state, configurator){
      var keyConfig = 'config';
      var _keyConfig = '_config';
      var keyConfigurator = keyConfig + 'urator';
      state[keyConfigurator] = configurator;
      
      Object.defineProperty(state, keyConfig, {
        get: function(){
          return this[_keyConfig]
        },
        set: function(config){
          this[keyConfigurator](this[_keyConfig] = config, this)
        }
      })
    }
    
    var configurator = require('../lib/configurator')
    function setter(newValue, oldValue, object, key){
      console.log('setter', key)
      if (typeof oldValue == 'undefined') oldValue = object[key];
    }
    
    var state = {}
    
    defineConfigurator(state, configurator)
    defineSetter(state, 'flarm', setter)
    
    console.log(state)
    state.flarm = 123
    console.log(state)
    state.flarm = {abc:123}
    console.log(state)
    state.config = {
      flarmSetter: function(value, oldValue, key){
        console.log('flarmSetter')
        this._flarm = value
      },
      flarm: 456
    }
    
    console.log(state)
    
    t.end()
  })
  
})
