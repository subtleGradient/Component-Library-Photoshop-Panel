require('tap').test("Config", function tap(t){
  
  var Config = require('../lib/Config')
  var Graph = require('../lib/Graph')
  
  t.test('exists', function tap(t){
    t.ok(Config)
    t.end()
  })
  
  t.test('sets config params onto the state', function tap(t){
    var state = {}
    Config({foo:"foo"}, state)
    t.is(state.foo, "foo")
    t.end()
  })
  
  t.test('dynamic configs are executed', function tap(t){
    var state = {}
    Config({$foo:function(){return "foo"}}, state)
    t.is(state.foo, "foo")
    t.end()
  })
  
  t.test('dynamic configs are executed in order', function tap(t){
    var state = {}
    var config = {execute:Graph, graph:{
      Config_1:{execute:Config, $foo:function(){return "foo"}}
    }}
    
    config.execute(config, state)
    
    t.is(state.Config_1.foo, "foo")
    t.end()
  })
  
  t.test('dynamic configs are passed the state as `this`', function tap(t){
    var state = {}
    var config = {execute:Graph, graph:{
      Config_1:{execute:Config, $foo:function(){return Math.random()}},
      Config_2:{execute:Config, $foo:function(){return this.getParent().Config_1.foo}},
    }}
    
    config.execute(config, state)
    t.is(state.Config_2.foo, state.Config_1.foo)
    config.execute(config, state)
    t.is(state.Config_2.foo, state.Config_1.foo)
    config.execute(config, state)
    t.is(state.Config_2.foo, state.Config_1.foo)
    t.end()
  })
  
  t.test('dynamic configs are executed in source order', function tap(t){
    var state = {}
    var config = {execute:Graph, graph:{
      Config_0:{execute:Config, $foo:function(){return this.getParent().Config_1.foo}},
      Config_1:{execute:Config, $foo:function(){return Math.random()}},
    }}
    var previous
    config.execute(config, state)
    t.is(state.Config_0.foo, previous)
    
    previous = state.Config_1.foo
    config.execute(config, state)
    t.is(state.Config_0.foo, previous)
    
    previous = state.Config_1.foo
    config.execute(config, state)
    t.is(state.Config_0.foo, previous)
    
    t.end()
  })
  
})
