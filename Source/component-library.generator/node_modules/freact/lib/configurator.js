function configurator(config, state, id, owner){
  var key, keySetter, defaultSetter = configurator.prototype.defaultSetterKey, value, oldValue;
  
  if (this instanceof configurator) state = this;
  else if (typeof state == 'undefined'){
    if (this != configurator.prototype.global) state = this;
    else state = Array.isArray(config) ? [] : {};
  }
  
  if (config == null) config = state.config;
  
  if (typeof config == 'object' && config != null){
    if ('configure' in config) state.configure = config.configure;
    if (defaultSetter in config) state[defaultSetter] = config[defaultSetter];
  }
  
  if (state.configure && state.configure != configurator) state.configure(config);
  else for (key in config){
    if (configurator.prototype.blacklist[key]) continue;
    value = config[key];
    keySetter = key + 'Setter';
    
    if (keySetter in config && typeof config[keySetter] == 'function')
      state[keySetter] = config[keySetter];
    
    if (keySetter in state && typeof state[keySetter] == 'function')
      state[keySetter](value, state[key], key, state);
    
    else if (defaultSetter in state && typeof state[defaultSetter] == 'function')
      state[defaultSetter](key, value, id);
    
    else if (typeof owner == 'object' && owner != null && defaultSetter in owner && typeof owner[defaultSetter] == 'function')
      owner[defaultSetter](key, value, id);
    
    else if (typeof value != 'object' || value == null) state[key] = value;
    
    else configurator(value, state[key], key, state);
  }
  
  if (typeof owner == 'object' && owner != null) owner[id] = state;
  return state;
}

configurator.prototype.defaultSetterKey = 'set'

configurator.prototype.global = Function('return this')();

configurator.prototype.blacklist = Object.getOwnPropertyNames(Object.prototype)
.reduce(function(blacklist, name){
  blacklist[name] = true;
  return blacklist;
},{});

configurator.prototype.blacklist[configurator.prototype.defaultSetter] = true

if (typeof module == 'object') module.exports = exports = configurator;
