module.exports = exports = Spring

function Spring(config, state){
  // config
  var mass = state.mass = config.mass || state.mass || Spring.prototype.mass;
  var friction = state.friction = config.friction || state.friction || Spring.prototype.friction;
  var stiffness = state.stiffness = config.stiffness || state.stiffness || Spring.prototype.stiffness;
  
  var precision = state.precision = config.precision || state.precision || Spring.prototype.precision || 1000;
  var min = state.min = config.min || state.min || Spring.prototype.min;
  
  var input = config.input || state.input || Spring.prototype.input;
  input = Math.round((input * precision)) / precision;
  
  var value = config.value || state.value || 0;
  var speed = config.speed || state.speed || 0;
  
  var scale = config.scale || state.scale || 0;
  if (!scale){
    var ts = state.ts || Date.now();
    state.ts = Date.now();
    scale = (state.ts - ts) / 30 || 1;
  }
  
  // calculate
  var distance = value - input;
  if (!(distance > min && distance > -min
  ||  distance < min && distance < -min)){
    if (!(speed > min && speed > -min
    ||  speed < min && speed < -min)){
      distance = 0;
      value = input;
      speed = 0;
    }
  }
  
  state.isDirty = distance + speed;
  
  var dampingForce = -friction * speed;
  var springForce = -stiffness * distance;
  var totalForce = springForce + dampingForce;
  var acceleration = totalForce / mass;
  
  // output
  state.speed = speed + acceleration * scale;
  state.value = value + state.speed;
  // state.value = Math.round((state.value * precision)) / precision;
  
  return state.value
}

Spring.prototype.mass = 10;
Spring.prototype.friction = 3;
Spring.prototype.stiffness = 120 / 100;
Spring.prototype.precision = 100;
Spring.prototype.min = 0.01;
Spring.prototype.input = 0;

if (!module.parent) Spring({}, {});
