/*
A bunch of stuff was copied from MooTools.
Copyright (c) 2006-2012 Valerio Proietti, <http://mad4milk.net/>
Copyright (c) 2013 Facebook
license: MIT-style license.
*/

function ElementChildren(){}
ElementChildren.prototype.set = function ElementChildren$set(name, config){
  if (config.debug || this.debug || ElementAttrObj.debug) console.group(this.__executionId__ + 'ElementChildren$set')
  var childrenState = this;
  var parentState = childrenState.__parent__;
  var childState = childrenState[name];
  
  if (this.debug || config.debug || ElementAttrObj.debug) console.log('ElementChildren$set', name, config, 'parentState', parentState);
  
  if (this.debug) config.debug = true;
  if (this.debug) childrenState.debug = true;
  
  if (!childState) childState = {};
  if (!childState.set) childState.set = config.set || ElementAttrObj.prototype.set;
  childState = Obj(config, childState, childrenState, name)
  childState.set('parent', parentState.node);
  childrenState[name] = childState;
  
  if (config.debug || this.debug || ElementAttrObj.debug) console.groupEnd(this.__executionId__ + 'ElementChildren$set')
}

function ElementAttrObj(){}

exports = module.exports = ElementAttrObj

ElementAttrObj.prototype.nodeName = 'div'

// ElementAttrObj.prototype.debug = true

ElementAttrObj.prototype.handleEvent = function(event){
  if (this.node != event.currentTarget){
    event.currentTarget.removeEventListener(event.type, this, event.eventPhase === 1);
    return;
  }
  var eventKey = 'on' + event.type;
  var eventHandlerSource
  if (typeof this[eventKey] == 'string'){
    eventHandlerSource = this[eventKey];
    eventKey = eventKey + 'Handler';
    if (!(this[eventKey] && this[eventKey].eventHandlerSource == eventHandlerSource)){
      this[eventKey] = Function('event', 'with(this){' + eventHandlerSource + '}');
      this[eventKey].eventHandlerSource = eventHandlerSource;
    }
  }
  if (!(eventKey in this && typeof this[eventKey] == 'function')){
    event.currentTarget.removeEventListener(event.type, this, event.eventPhase === 1);
    return;
  }
  return this[eventKey](event);
}

ElementAttrObj.prototype.set = function ElementAttrObj$set(key, value){
  if (key.charAt(0) === '_') return; // Don't copy private properties
  var oldValue = this[key];
  if (this.debug || ElementAttrObj.debug) console.debug('ElementAttrObj$set', key, 'to', value, 'from', oldValue);
  if (key in this && oldValue === value){
    if (this.debug || ElementAttrObj.debug) console.debug('no change, ignoring', key);
    return;
  }
  
  if (!ElementAttrObj.setters) ElementAttrObj._initSetters();
  var set = ElementAttrObj.setters;
  var realKey = set._realKeyFor[key];
  if (realKey) oldValue = this[realKey];
  if (oldValue === value || (oldValue !== oldValue) && (value !== value)){
    if (this.debug || ElementAttrObj.debug) console.debug('no change, ignoring', key);
    return;
  }
  
  if (key == 'node') {
    this.node = value;
    return;
  }
  var node = this.node;
  if (!node && key != 'nodeName') {
    if (!this._cacheForAllTheStuffThatWasSetBeforeTheNodeExisted) this._cacheForAllTheStuffThatWasSetBeforeTheNodeExisted = {};
    if (this.debug || ElementAttrObj.debug) console.log('_cacheForAllTheStuffThatWasSetBeforeTheNodeExisted', key);
    this._cacheForAllTheStuffThatWasSetBeforeTheNodeExisted[key] = value;
    return;
  }
  if (key == 'nodeName' && typeof document != 'undefined'){
    this.nodeName = value || this.nodeName || ElementAttrObj.prototype.nodeName;
    node = this.node = document.createElement(this.nodeName);
    
    if (!this.handleEvent) this.handleEvent = ElementAttrObj.prototype.handleEvent;
    
    if (this._cacheForAllTheStuffThatWasSetBeforeTheNodeExisted) {
      Object.keys(this._cacheForAllTheStuffThatWasSetBeforeTheNodeExisted).forEach(function(key){
        var value = this._cacheForAllTheStuffThatWasSetBeforeTheNodeExisted[key];
        delete this._cacheForAllTheStuffThatWasSetBeforeTheNodeExisted[key];
        this.set(key, value);
      },this)
      delete this._cacheForAllTheStuffThatWasSetBeforeTheNodeExisted
    }
  } else {
    var setter = ElementAttrObj.setters[key];
    if (setter)
      setter.call(this, node, key, value, oldValue);
    else if (typeof value == 'function'){
      var boundValue = value.bind(this);
      boundValue.value = value;
      node[realKey || key] = boundValue;
    }
    else if (value == null)
      node.removeAttribute(key);
    else
      node.setAttribute(key, value);
  }
  if (typeof value == 'object'){
    if (this.debug || ElementAttrObj.debug) console.warn('NOT actually setting state', (realKey || key), "because it's an object");
    return;
  }
  if (this.debug || ElementAttrObj.debug) console.warn('actually setting state', realKey || key, value, oldValue);
  // this[key] = Obj(value, this[key], this, key);
  this[realKey || key] = value;
}

ElementAttrObj._initSetters = function(){
  
  if (!this.setters) this.setters = {};
  var set = this.setters;
  
  set.childNodes = set.children =
  function setChildren(node, key, children){
    var config = children;
    var state = this.children;
    if (!state) state = this.children = {};
    if (!state.set) state.set = ElementChildren.prototype.set;
    
    state = Obj(config, state, this, 'children');
    this.children = state;
  }
  
  set.parentElement = set.parentNode = set.parent =
  function setParent(node, key, newParent){
    var oldParent = node.parentNode;
    if (typeof newParent == 'string' && typeof document != 'undefined'){
      if (newParent.toLowerCase() == 'body') newParent = document.body;
      else newParent = document.getElementById(newParent.replace('#',''));
    }
    if (newParent == oldParent) return;
    if (oldParent) oldParent.removeChild(node);
    newParent.insertBefore(node, this.nextSibling || null);
  }
  
  set.onabort = set.onbeforecopy = set.onbeforecut = set.onbeforepaste = set.onblur = set.onchange = set.onclick = set.oncontextmenu = set.oncopy = set.oncut = set.ondblclick = set.ondrag = set.ondragend = set.ondragenter = set.ondragleave = set.ondragover = set.ondragstart = set.ondrop = set.onerror = set.onfocus = set.oninput = set.oninvalid = set.onkeydown = set.onkeypress = set.onkeyup = set.onload = set.onmousedown = set.onmouseenter = set.onmouseleave = set.onmousemove = set.onmouseout = set.onmouseover = set.onmouseup = set.onmousewheel = set.onpaste = set.onreset = set.onscroll = set.onsearch = set.onselect = set.onselectstart = set.onsubmit = set.ontouchcancel = set.ontouchend = set.ontouchmove = set.ontouchstart =
  function setEventHandler(node, key, value){
    if (typeof this.handleEvent != 'function') this.handleEvent = ElementAttrObj.prototype.handleEvent;
    var eventName = key.substring(2);
    node.addEventListener(eventName, this, false);
  }
  
  set.type = set.value = set.defaultValue = set.accessKey = set.cellPadding = set.cellSpacing = set.colSpan = set.frameBorder = set.rowSpan = set.tabIndex = set.useMap = set.outerHTML = set.innerHTML = set.type = set.value = set.name = set.href = set.title = set.id =
  function setProperty(node, key, value){
    node[key] = value;
  }

  set.compact = set.nowrap = set.ismap = set.declare = set.noshade = set.checked = set.disabled = set.readOnly = set.multiple = set.selected = set.noresize = set.defer = set.defaultChecked = set.autofocus = set.controls = set.autoplay = set.loop =
  function setBoolean(node, key, value){
    node[key] = !!value;
  }

  set.innerText = set.textContent =
  function setText(node, key, value){
    node.innerText = value;
    node.textContent = value;
  }

  /* <webkit> */
  if (typeof document != 'undefined'){
    var el = document.createElement('button');
    // IE sets type as readonly and throws
    try { el.type = 'button'; } catch(e){}
    if (el.type != 'button') set.type = function(node, key, value){
      node.setAttribute('type', value);
    };
    el = null;
  }
  /* </webkit> */

  /*<IE>*/
  if (typeof document != 'undefined'){
    var el = document.createElement('input');
    el.value = 't';
    el.type = 'submit';
    if (el.value != 't') set.type = function(node, key, type){
      var value = node.value;
      node.type = type;
      node.value = value;
    };
    el = null;
  }
  /*</IE>*/


  set['className'] =
  set['class'] = function(node, key, value){
    if (typeof value == 'object' && typeof value.join == 'function') value = value.join(' ');
    ('className' in node) ? node.className = (value || '') : node.setAttribute('class', value);
  }
  set['htmlFor'] =
  set['for'] = function(node, key, value){
    ('htmlFor' in node) ? node.htmlFor = value : node.setAttribute('for', value);
  }
  set.value = function(node, key, value){
    node.value = (value != null) ? value : '';
  }
  set.style = function(node, key, value){
    if (typeof value == 'object') {
      if ('cssText' in value) value = value.cssText;
      else if (typeof value.join == 'function') value = value.join(';');
    }
    (node.style) ? node.style.cssText = value : node.setAttribute('style', value);
  }

  set._withRealKey = function(node, key, value){
    var realKey = set._realKeyFor[key];
    set[realKey](node, realKey, value);
  }
  
  Object.keys(set).forEach(function(realKey){
    var key = realKey.toLowerCase();
    if (key == realKey) return;
    if (!set._realKeyFor) set._realKeyFor = {};
    set._realKeyFor[key] = realKey;
    set[key] = set._withRealKey;
  })
}
