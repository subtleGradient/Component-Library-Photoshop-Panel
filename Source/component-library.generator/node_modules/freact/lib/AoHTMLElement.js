var ElementAttrObj = require('./ElementAttrObj')

module.exports = exports = AoHTMLElement

AoHTMLElement.handleInputEvent = function(event){
  this.value = this.node.value
  this.checked = this.node.checked
  this.didChange = true
}

function AoHTMLElement(config, state){
  // Can't be the same object
  if (state.attributes == config.attributes) delete state.attributes;
  if (state.style == config.style) delete state.style;
  // init
  if (!state.attributes) state.attributes = {};
  if (!state.style) state.style = {};
  if (!state.nextAttributes) state.nextAttributes = {};
  if (!state.nextStyle) state.nextStyle = {};
  // config
  if (!state.attributes.getParent) state.attributes.getParent = state.getParent
  if (!state.style.getParent) state.style.getParent = state.getParent
  if (!state.attributes.getRoot) state.attributes.getRoot = state.getRoot
  if (!state.style.getRoot) state.style.getRoot = state.getRoot
  if (!state.nextAttributes.getParent) state.nextAttributes.getParent = state.getParent
  if (!state.nextStyle.getParent) state.nextStyle.getParent = state.getParent
  if (!state.nextAttributes.getRoot) state.nextAttributes.getRoot = state.getRoot
  if (!state.nextStyle.getRoot) state.nextStyle.getRoot = state.getRoot
  if (config.attributes) Config(config.attributes, state.nextAttributes);
  if (config.style) Config(config.style, state.nextStyle);
  
  state.nodeName = config.nodeName || state.nodeName || config.tagName || state.tagName || 'div';
  
  var oldNode = state.node
  var node = state.node
  if (!state.node && state.nextAttributes.id) node = state.node = (config.parentNode || state.parentNode || document).getElementById(state.nextAttributes.id);
  if (!state.node) node = state.node = document.createElement(state.nodeName);
  
  if (config.parentNode && config.parentNode != state.parentNode) delete state.parentNode;
  if (!state.parentNode){
    state.parentNode = config.parentNode || document.body || document.documentElement;
    state.parentNode.insertBefore(state.node, config.previousSibling || state.previousSibling);
  }
  
  // apply changes
  if (state.didChange){
    if ("value" in state) state.nextAttributes.value = state.value;
    if ("checked" in state) state.nextAttributes.checked = state.checked;
    state.didChange = false
  }
  
  // apply
  var attrKey
  for (attrKey in state.nextAttributes) {
    if (state.attributes[attrKey] == state.nextAttributes[attrKey]) continue;
    if (attrKey.charAt(0) === '$') continue;
    node[attrKey] = state.attributes[attrKey] = state.nextAttributes[attrKey];
    node.setAttribute(attrKey, state.attributes[attrKey])
  }
  for (attrKey in state.nextStyle) {
    if (state.style[attrKey] == state.nextStyle[attrKey]) continue;
    if (attrKey.charAt(0) === '$') continue;
    state.style[attrKey] = state.nextStyle[attrKey];
    if (typeof state.style[attrKey] == 'number')
      node.style[attrKey] = state.style[attrKey] + 'px';
    else node.style[attrKey] = state.style[attrKey]
  }
  // buffer swap & clean
  var attributes = state.attributes; state.attributes = state.nextAttributes; state.nextAttributes = attributes;
  for (attrKey in state.nextAttributes) delete state.nextAttributes[attrKey];
  var style = state.style; state.style = state.nextStyle; state.nextStyle = style;
  for (attrKey in state.nextStyle) delete state.nextStyle[attrKey];
  
  if (node != oldNode){
    if (state.nodeName == 'input'){
      node.onchange = node.onblur = node.onkeyup = AoHTMLElement.handleInputEvent.bind(state)
      node.onchange()
    }
  }
  if (config.graph) {
    for (var childNode in config.graph) config.graph[childNode].parentNode = state.node;
    Graph(config, state);
  }
}
