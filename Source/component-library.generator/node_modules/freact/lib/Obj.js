exports = module.exports = Obj

function Set(key, value){
  if (this.debug || Obj.debug) console.debug('Obj$set', key, 'to', value);
  var state = this;
  state[key] = Obj(value, state[key], state, key);
}

var valueOf = Object.prototype.valueOf;

Obj.__executionId__ = 0;
Obj.global = this;
function Obj(config, state, _parent, _key){
  if (typeof config != 'object') return config;
  if (config == null) return config;
  // if (!(typeof config == 'object' && state != null)) return config;
  // if (!(typeof state == 'object' && config != null)) state = _parent[_key];
  if (typeof state != 'object' || state == null) if (_parent && _key) state = _parent[_key];
  // if (typeof state != 'object' || state == null && this != Obj.global) state = this;
  if (typeof state != 'object' || state == null) state = Array.isArray(config) ? [] : {};
  
  state.__executionId__ = Obj.__executionId__ ++
  if (Obj.debug || config.debug || state.debug) console.group(state.__executionId__)
  if (Obj.debug || config.debug || state.debug) console.debug('Obj', config, state, _parent, _key)
    
  state.__parent__ = _parent;
  state.__key__ = _key;
  
  if (_parent) state.__root__ = _parent.__root__ || _parent;
  else state.__root__ = state;
  
  if (typeof config.set == 'function') state.set = config.set;
  if (typeof state.set != 'function') state.set = config.set || Set;
  
  if (!_parent && !state._values) state._values = [];
  var _values = state._values = state.__root__._values;
  
  for (var key in config) {
    if (key == 'set') continue;
    if (config.hasOwnProperty(key)) continue;
    if (Obj.debug || config.debug || state.debug) console.group(state.__executionId__ + key)
    state.set(key, config[key]);
    if (Obj.debug || config.debug || state.debug) console.groupEnd(state.__executionId__ + key)
  }
  for (var key in config) {
    if (key == 'set') continue;
    if (!config.hasOwnProperty(key)) continue;
    if (Obj.debug || config.debug || state.debug) console.group(state.__executionId__ + key)
    state.set(key, config[key]);
    if (Obj.debug || config.debug || state.debug) console.groupEnd(state.__executionId__ + key)
  }
  delete state._values;
  
  if (state.valueOf != valueOf) _values.push(state);
  
  if (!_parent) for (var index = -1, length = _values.length; ++index < length;) {
    node = _values[index];
    if (typeof node.valueOf == 'string') node.valueOf = state.__root__[node.valueOf];
    if (Obj.debug || config.debug || state.debug) console.group(state.__executionId__ + node.__key__ + 'valueOf()');
    node.__parent__[node.__key__] = node.valueOf();
    if (Obj.debug || config.debug || state.debug) console.groupEnd(state.__executionId__ + node.__key__ + 'valueOf()');
  }
  if (Obj.debug || config.debug || state.debug) console.groupEnd(state.__executionId__)
  return state;
}
