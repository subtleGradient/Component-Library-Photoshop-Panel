var Model = require('..')

require('tap').test('Model', function tap(t){
  
  t.test('exists', function tap(t){
    t.is(typeof Model, 'function')
    t.end()
  })
  
  t.test('set root', function tap(t){
    var object = {}
    var model = new Model(object)
    
    t.is(typeof model.set, 'function')
    model.set('', object, function(error){
      t.ok(error)
      t.end()
    })
  })
  
  t.test('get root', function tap(t){
    var model = new Model()
    
    t.is(typeof model.set, 'function')
    model.get('', function(error, object){
      t.notOk(error)
      t.ok(object)
      t.end()
    })
  })
  
  t.test('set/get property', function tap(t){
    var object = {}
    var model = new Model(object)
    var randomValue = Math.random()
    
    t.is(typeof model.set, 'function')
    model.set('foo', randomValue, function(error){
      model.get('foo', function(error, value){
        t.is(value, randomValue)
        t.end()
      })
    })
    
  })
  
  t.test('set/get deep property with missing parents', function tap(t){
    var object = {}
    var model = new Model(object)
    var randomValue = Math.random()
    
    t.is(typeof model.set, 'function')
    model.set('foo.bar.baz', randomValue, function(error){
      t.ok(error)
      t.end()
    })
    
  })
  
  t.test('set/get deep property', function tap(t){
    var object = {}
    var model = new Model(object)
    var randomValue = Math.random()
    
    t.is(typeof model.set, 'function')
    model.set('foo', {})
    model.set('foo.bar', {})
    model.set('foo.bar.baz', randomValue, function(error){
      t.notOk(error)
      model.get('foo.bar.baz', function(error, value){
        t.is(value, randomValue)
        t.end()
      })
    })
    
  })
  
  t.test('watch path', function tap(t){
    var object = {}
    var model = new Model(object)
    var randomValue = Math.random()
    
    t.is(typeof model.set, 'function')
    
    var watchCallbackCount = 0
    var observeCallbackCount = 0
    
    model.observe('foo.bar.baz', function(newValue, oldValue){
      watchCallbackCount++
    }, function(error, observerId){
      observeCallbackCount++;
      t.notOk(error);
      t.ok(observerId);
    })
    
    model.set('foo', {})
    model.set('foo.bar', {})
    model.set('foo.bar.baz', randomValue)
    t.is(object.foo.bar.baz, randomValue)
    
    t.is(watchCallbackCount, 2)
    
    model.get('foo.bar.baz', function(e,value){
      t.notOk(e)
      t.is(value, randomValue)
    })
    
    t.is(watchCallbackCount, 2)
    model.set('foo.bar.baz', Math.random());t.is(watchCallbackCount, 3)
    model.set('foo.bar.baz', Math.random());t.is(watchCallbackCount, 4)
    model.set('foo.bar.baz', Math.random());t.is(watchCallbackCount, 5)
    
    model.clearObserver(1)
    model.set('foo.bar.baz', Math.random());t.is(watchCallbackCount, 5)
    model.set('foo.bar.baz', Math.random());t.is(watchCallbackCount, 5)
    model.set('foo.bar.baz', Math.random());t.is(watchCallbackCount, 5)
    
    t.isNot(observeCallbackCount, 0)
    t.end()
  })
})
